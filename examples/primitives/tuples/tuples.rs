// Кортежи можно использовать и как аргумент функции, и как её возвращаемое значение
fn reverse(pair: (i32, bool)) -> (bool, i32) {
    // `let` используется, чтобы связать члены кортежа с переменными
    let (integer, boolean) = pair;

    (boolean, integer)
}

fn main() {
    // Кортеж с множеством разных типов
    let long_tuple = (1u8, 2u16, 3u32, 4u64,
                      -1i8, -2i16, -3i32, -4i64,
                      0.1f32, 0.2f64,
                      'a', true);

    // Значения можно извлечь с помощью синтаксиса `.N`
    println!("первый член длинного кортежа: {}", long_tuple.0);
    println!("второй член длинного кортежа: {}", long_tuple.1);

    // Кортежи можно вкладывать в кортежи
    let tuple_of_tuples = ((1u8, 2u16, 2u32), (4u64, -1i8), -2i16);

    // Кортежи можно вывести на экран
    println!("кортеж кортежей: {:?}", tuple_of_tuples);

    let pair = (1, true);
    println!("пара: {:?}", pair);

    println!("перевёрнутая пара: {:?}", reverse(pair));

    // Чтобы создать кортеж с единственным элементом нужна запятая, дабы отличить
    // их от литералов, заключённых в скобки
    println!("кортеж с единственным элементом: {:?}", (5u32,));
    println!("просто число: {:?}", (5u32));
}
